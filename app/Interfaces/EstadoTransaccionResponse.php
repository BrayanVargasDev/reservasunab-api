<?php

namespace App\Interfaces;

use DateTime;
use DateTimeInterface;
use Exception;
use stdClass;

// This is a autogenerated file:EstadoTransaccionResponse

class EstadoTransaccionResponse
{
    private string $entityCode; // json:EntityCode Required
    private string $ticketID; // json:TicketId Required
    private string $trazabilityCode; // json:TrazabilityCode Required
    private string $tranState; // json:TranState Required
    private string $returnCode; // json:ReturnCode Required
    private int $transValue; // json:TransValue Required
    private int $transVatValue; // json:TransVatValue Required
    private string $payCurrency; // json:PayCurrency Required
    private int $currencyRate; // json:CurrencyRate Required
    private DateTime $bankProcessDate; // json:BankProcessDate Required
    private string $fiCode; // json:FICode Required
    private string $fiName; // json:FiName Required
    private string $paymentSystem; // json:PaymentSystem Required
    private string $transCycle; // json:TransCycle Required
    private string $invoice; // json:Invoice Required
    private array $referenceArray; // json:ReferenceArray Required
    private array $operationArray; // json:OperationArray Required
    private string $srvCode; // json:SrvCode Required
    private string $paymentDesc; // json:PaymentDesc Required
    private array $paymentInfoArray; // json:PaymentInfoArray Required
    private array $paymentsArray; // json:PaymentsArray Required
    private string $sessionToken; // json:SessionToken Required
    private Object $subscription; // json:Subscription Optional
    private array $subservicesArray; // json:SubservicesArray Required

    /**
     * @param string $entityCode
     * @param string $ticketID
     * @param string $trazabilityCode
     * @param string $tranState
     * @param string $returnCode
     * @param int $transValue
     * @param int $transVatValue
     * @param string $payCurrency
     * @param int $currencyRate
     * @param DateTime $bankProcessDate
     * @param string $fiCode
     * @param string $fiName
     * @param string $paymentSystem
     * @param string $transCycle
     * @param string $invoice
     * @param array $referenceArray
     * @param array $operationArray
     * @param string $srvCode
     * @param string $paymentDesc
     * @param array $paymentInfoArray
     * @param array $paymentsArray
     * @param string $sessionToken
     * @param Object $subscription
     * @param array $subservicesArray
     */
    public function __construct(string $entityCode, string $ticketID, string $trazabilityCode, string $tranState, string $returnCode, int $transValue, int $transVatValue, string $payCurrency, int $currencyRate, DateTime $bankProcessDate, string $fiCode, string $fiName, string $paymentSystem, string $transCycle, string $invoice, array $referenceArray, array $operationArray, string $srvCode, string $paymentDesc, array $paymentInfoArray, array $paymentsArray, string $sessionToken, Object $subscription, array $subservicesArray)
    {
        $this->entityCode = $entityCode;
        $this->ticketID = $ticketID;
        $this->trazabilityCode = $trazabilityCode;
        $this->tranState = $tranState;
        $this->returnCode = $returnCode;
        $this->transValue = $transValue;
        $this->transVatValue = $transVatValue;
        $this->payCurrency = $payCurrency;
        $this->currencyRate = $currencyRate;
        $this->bankProcessDate = $bankProcessDate;
        $this->fiCode = $fiCode;
        $this->fiName = $fiName;
        $this->paymentSystem = $paymentSystem;
        $this->transCycle = $transCycle;
        $this->invoice = $invoice;
        $this->referenceArray = $referenceArray;
        $this->operationArray = $operationArray;
        $this->srvCode = $srvCode;
        $this->paymentDesc = $paymentDesc;
        $this->paymentInfoArray = $paymentInfoArray;
        $this->paymentsArray = $paymentsArray;
        $this->sessionToken = $sessionToken;
        $this->subscription = $subscription;
        $this->subservicesArray = $subservicesArray;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromEntityCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toEntityCode(): string
    {
        if (EstadoTransaccionResponse::validateEntityCode($this->entityCode)) {
            return $this->entityCode; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::entityCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateEntityCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::entityCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getEntityCode(): string
    {
        if (EstadoTransaccionResponse::validateEntityCode($this->entityCode)) {
            return $this->entityCode;
        }
        throw new Exception('never get to getEntityCode EstadoTransaccionResponse::entityCode');
    }

    /**
     * @return string
     */
    public static function sampleEntityCode(): string
    {
        return 'EstadoTransaccionResponse::entityCode::31'; /*31:entityCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTicketID(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTicketID(): string
    {
        if (EstadoTransaccionResponse::validateTicketID($this->ticketID)) {
            return $this->ticketID; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::ticketID');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTicketID(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::ticketID");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTicketID(): string
    {
        if (EstadoTransaccionResponse::validateTicketID($this->ticketID)) {
            return $this->ticketID;
        }
        throw new Exception('never get to getTicketID EstadoTransaccionResponse::ticketID');
    }

    /**
     * @return string
     */
    public static function sampleTicketID(): string
    {
        return 'EstadoTransaccionResponse::ticketID::32'; /*32:ticketID*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTrazabilityCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTrazabilityCode(): string
    {
        if (EstadoTransaccionResponse::validateTrazabilityCode($this->trazabilityCode)) {
            return $this->trazabilityCode; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::trazabilityCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTrazabilityCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::trazabilityCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTrazabilityCode(): string
    {
        if (EstadoTransaccionResponse::validateTrazabilityCode($this->trazabilityCode)) {
            return $this->trazabilityCode;
        }
        throw new Exception('never get to getTrazabilityCode EstadoTransaccionResponse::trazabilityCode');
    }

    /**
     * @return string
     */
    public static function sampleTrazabilityCode(): string
    {
        return 'EstadoTransaccionResponse::trazabilityCode::33'; /*33:trazabilityCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTranState(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTranState(): string
    {
        if (EstadoTransaccionResponse::validateTranState($this->tranState)) {
            return $this->tranState; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::tranState');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTranState(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::tranState");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTranState(): string
    {
        if (EstadoTransaccionResponse::validateTranState($this->tranState)) {
            return $this->tranState;
        }
        throw new Exception('never get to getTranState EstadoTransaccionResponse::tranState');
    }

    /**
     * @return string
     */
    public static function sampleTranState(): string
    {
        return 'EstadoTransaccionResponse::tranState::34'; /*34:tranState*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromReturnCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toReturnCode(): string
    {
        if (EstadoTransaccionResponse::validateReturnCode($this->returnCode)) {
            return $this->returnCode; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::returnCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateReturnCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::returnCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getReturnCode(): string
    {
        if (EstadoTransaccionResponse::validateReturnCode($this->returnCode)) {
            return $this->returnCode;
        }
        throw new Exception('never get to getReturnCode EstadoTransaccionResponse::returnCode');
    }

    /**
     * @return string
     */
    public static function sampleReturnCode(): string
    {
        return 'EstadoTransaccionResponse::returnCode::35'; /*35:returnCode*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTransValue(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTransValue(): int
    {
        if (EstadoTransaccionResponse::validateTransValue($this->transValue)) {
            return $this->transValue; /*int*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::transValue');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTransValue(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::transValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTransValue(): int
    {
        if (EstadoTransaccionResponse::validateTransValue($this->transValue)) {
            return $this->transValue;
        }
        throw new Exception('never get to getTransValue EstadoTransaccionResponse::transValue');
    }

    /**
     * @return int
     */
    public static function sampleTransValue(): int
    {
        return 36; /*36:transValue*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTransVatValue(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTransVatValue(): int
    {
        if (EstadoTransaccionResponse::validateTransVatValue($this->transVatValue)) {
            return $this->transVatValue; /*int*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::transVatValue');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTransVatValue(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::transVatValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTransVatValue(): int
    {
        if (EstadoTransaccionResponse::validateTransVatValue($this->transVatValue)) {
            return $this->transVatValue;
        }
        throw new Exception('never get to getTransVatValue EstadoTransaccionResponse::transVatValue');
    }

    /**
     * @return int
     */
    public static function sampleTransVatValue(): int
    {
        return 37; /*37:transVatValue*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPayCurrency(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPayCurrency(): string
    {
        if (EstadoTransaccionResponse::validatePayCurrency($this->payCurrency)) {
            return $this->payCurrency; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::payCurrency');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePayCurrency(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::payCurrency");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPayCurrency(): string
    {
        if (EstadoTransaccionResponse::validatePayCurrency($this->payCurrency)) {
            return $this->payCurrency;
        }
        throw new Exception('never get to getPayCurrency EstadoTransaccionResponse::payCurrency');
    }

    /**
     * @return string
     */
    public static function samplePayCurrency(): string
    {
        return 'EstadoTransaccionResponse::payCurrency::38'; /*38:payCurrency*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromCurrencyRate(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toCurrencyRate(): int
    {
        if (EstadoTransaccionResponse::validateCurrencyRate($this->currencyRate)) {
            return $this->currencyRate; /*int*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::currencyRate');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateCurrencyRate(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::currencyRate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getCurrencyRate(): int
    {
        if (EstadoTransaccionResponse::validateCurrencyRate($this->currencyRate)) {
            return $this->currencyRate;
        }
        throw new Exception('never get to getCurrencyRate EstadoTransaccionResponse::currencyRate');
    }

    /**
     * @return int
     */
    public static function sampleCurrencyRate(): int
    {
        return 39; /*39:currencyRate*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return DateTime
     */
    public static function fromBankProcessDate(string $value): DateTime
    {
        $tmp = DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, $value);
        if (!is_a($tmp, 'DateTime')) {
            throw new Exception('Attribute Error:EstadoTransaccionResponse::');
        }
        return $tmp;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toBankProcessDate(): string
    {
        if (EstadoTransaccionResponse::validateBankProcessDate($this->bankProcessDate)) {
            return $this->bankProcessDate->format(DateTimeInterface::ISO8601_EXPANDED);
        }
        throw new Exception('never get to this EstadoTransaccionResponse::bankProcessDate');
    }

    /**
     * @param DateTime
     * @return bool
     * @throws Exception
     */
    public static function validateBankProcessDate(DateTime $value): bool
    {
        if (!is_a($value, 'DateTime')) {
            throw new Exception('Attribute Error:EstadoTransaccionResponse::bankProcessDate');
        }
        return true;
    }

    /**
     * @throws Exception
     * @return DateTime
     */
    public function getBankProcessDate(): DateTime
    {
        if (EstadoTransaccionResponse::validateBankProcessDate($this->bankProcessDate)) {
            return $this->bankProcessDate;
        }
        throw new Exception('never get to getBankProcessDate EstadoTransaccionResponse::bankProcessDate');
    }

    /**
     * @return DateTime
     */
    public static function sampleBankProcessDate(): DateTime
    {
        return DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, '2020-12-10T12:10:10+00:00');
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFiCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFiCode(): string
    {
        if (EstadoTransaccionResponse::validateFiCode($this->fiCode)) {
            return $this->fiCode; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::fiCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFiCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::fiCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFiCode(): string
    {
        if (EstadoTransaccionResponse::validateFiCode($this->fiCode)) {
            return $this->fiCode;
        }
        throw new Exception('never get to getFiCode EstadoTransaccionResponse::fiCode');
    }

    /**
     * @return string
     */
    public static function sampleFiCode(): string
    {
        return 'EstadoTransaccionResponse::fiCode::41'; /*41:fiCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFiName(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFiName(): string
    {
        if (EstadoTransaccionResponse::validateFiName($this->fiName)) {
            return $this->fiName; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::fiName');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFiName(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::fiName");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFiName(): string
    {
        if (EstadoTransaccionResponse::validateFiName($this->fiName)) {
            return $this->fiName;
        }
        throw new Exception('never get to getFiName EstadoTransaccionResponse::fiName');
    }

    /**
     * @return string
     */
    public static function sampleFiName(): string
    {
        return 'EstadoTransaccionResponse::fiName::42'; /*42:fiName*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPaymentSystem(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPaymentSystem(): string
    {
        if (EstadoTransaccionResponse::validatePaymentSystem($this->paymentSystem)) {
            return $this->paymentSystem; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::paymentSystem');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentSystem(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::paymentSystem");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPaymentSystem(): string
    {
        if (EstadoTransaccionResponse::validatePaymentSystem($this->paymentSystem)) {
            return $this->paymentSystem;
        }
        throw new Exception('never get to getPaymentSystem EstadoTransaccionResponse::paymentSystem');
    }

    /**
     * @return string
     */
    public static function samplePaymentSystem(): string
    {
        return 'EstadoTransaccionResponse::paymentSystem::43'; /*43:paymentSystem*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTransCycle(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTransCycle(): string
    {
        if (EstadoTransaccionResponse::validateTransCycle($this->transCycle)) {
            return $this->transCycle; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::transCycle');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTransCycle(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::transCycle");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTransCycle(): string
    {
        if (EstadoTransaccionResponse::validateTransCycle($this->transCycle)) {
            return $this->transCycle;
        }
        throw new Exception('never get to getTransCycle EstadoTransaccionResponse::transCycle');
    }

    /**
     * @return string
     */
    public static function sampleTransCycle(): string
    {
        return 'EstadoTransaccionResponse::transCycle::44'; /*44:transCycle*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromInvoice(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toInvoice(): string
    {
        if (EstadoTransaccionResponse::validateInvoice($this->invoice)) {
            return $this->invoice; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::invoice');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateInvoice(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::invoice");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getInvoice(): string
    {
        if (EstadoTransaccionResponse::validateInvoice($this->invoice)) {
            return $this->invoice;
        }
        throw new Exception('never get to getInvoice EstadoTransaccionResponse::invoice');
    }

    /**
     * @return string
     */
    public static function sampleInvoice(): string
    {
        return 'EstadoTransaccionResponse::invoice::45'; /*45:invoice*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromReferenceArray(array $value): array
    {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toReferenceArray(): array
    {
        if (EstadoTransaccionResponse::validateReferenceArray($this->referenceArray)) {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->referenceArray);
        }
        throw new Exception('never get to this EstadoTransaccionResponse::referenceArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateReferenceArray(array $value): bool
    {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::referenceArray");
        }
        array_walk($value, function ($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:EstadoTransaccionResponse::referenceArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getReferenceArray(): array
    {
        if (EstadoTransaccionResponse::validateReferenceArray($this->referenceArray)) {
            return $this->referenceArray;
        }
        throw new Exception('never get to getReferenceArray EstadoTransaccionResponse::referenceArray');
    }

    /**
     * @return array
     */
    public static function sampleReferenceArray(): array
    {
        return  array(
            'EstadoTransaccionResponse::::46' /*46:*/
        ); /* 46:referenceArray*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromOperationArray(array $value): array
    {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toOperationArray(): array
    {
        if (EstadoTransaccionResponse::validateOperationArray($this->operationArray)) {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->operationArray);
        }
        throw new Exception('never get to this EstadoTransaccionResponse::operationArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateOperationArray(array $value): bool
    {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::operationArray");
        }
        array_walk($value, function ($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:EstadoTransaccionResponse::operationArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getOperationArray(): array
    {
        if (EstadoTransaccionResponse::validateOperationArray($this->operationArray)) {
            return $this->operationArray;
        }
        throw new Exception('never get to getOperationArray EstadoTransaccionResponse::operationArray');
    }

    /**
     * @return array
     */
    public static function sampleOperationArray(): array
    {
        return  array(
            'AnyType::EstadoTransaccionResponse::::47'/*47:*/
        ); /* 47:operationArray*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSrvCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSrvCode(): string
    {
        if (EstadoTransaccionResponse::validateSrvCode($this->srvCode)) {
            return $this->srvCode; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::srvCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSrvCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::srvCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSrvCode(): string
    {
        if (EstadoTransaccionResponse::validateSrvCode($this->srvCode)) {
            return $this->srvCode;
        }
        throw new Exception('never get to getSrvCode EstadoTransaccionResponse::srvCode');
    }

    /**
     * @return string
     */
    public static function sampleSrvCode(): string
    {
        return 'EstadoTransaccionResponse::srvCode::48'; /*48:srvCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPaymentDesc(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPaymentDesc(): string
    {
        if (EstadoTransaccionResponse::validatePaymentDesc($this->paymentDesc)) {
            return $this->paymentDesc; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::paymentDesc');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentDesc(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::paymentDesc");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPaymentDesc(): string
    {
        if (EstadoTransaccionResponse::validatePaymentDesc($this->paymentDesc)) {
            return $this->paymentDesc;
        }
        throw new Exception('never get to getPaymentDesc EstadoTransaccionResponse::paymentDesc');
    }

    /**
     * @return string
     */
    public static function samplePaymentDesc(): string
    {
        return 'EstadoTransaccionResponse::paymentDesc::49'; /*49:paymentDesc*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromPaymentInfoArray(array $value): array
    {
        return  array_map(function ($value) {
            return PaymentInfoArray::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toPaymentInfoArray(): array
    {
        if (EstadoTransaccionResponse::validatePaymentInfoArray($this->paymentInfoArray)) {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->paymentInfoArray);
        }
        throw new Exception('never get to this EstadoTransaccionResponse::paymentInfoArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentInfoArray(array $value): bool
    {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::paymentInfoArray");
        }
        array_walk($value, function ($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getPaymentInfoArray(): array
    {
        if (EstadoTransaccionResponse::validatePaymentInfoArray($this->paymentInfoArray)) {
            return $this->paymentInfoArray;
        }
        throw new Exception('never get to getPaymentInfoArray EstadoTransaccionResponse::paymentInfoArray');
    }

    /**
     * @return array
     */
    public static function samplePaymentInfoArray(): array
    {
        return  array(
            PaymentInfoArray::sample() /*50:*/
        ); /* 50:paymentInfoArray*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromPaymentsArray(array $value): array
    {
        return  array_map(function ($value) {
            return PaymentsArray::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toPaymentsArray(): array
    {
        if (EstadoTransaccionResponse::validatePaymentsArray($this->paymentsArray)) {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->paymentsArray);
        }
        throw new Exception('never get to this EstadoTransaccionResponse::paymentsArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentsArray(array $value): bool
    {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::paymentsArray");
        }
        array_walk($value, function ($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getPaymentsArray(): array
    {
        if (EstadoTransaccionResponse::validatePaymentsArray($this->paymentsArray)) {
            return $this->paymentsArray;
        }
        throw new Exception('never get to getPaymentsArray EstadoTransaccionResponse::paymentsArray');
    }

    /**
     * @return array
     */
    public static function samplePaymentsArray(): array
    {
        return  array(
            PaymentsArray::sample() /*51:*/
        ); /* 51:paymentsArray*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSessionToken(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSessionToken(): string
    {
        if (EstadoTransaccionResponse::validateSessionToken($this->sessionToken)) {
            return $this->sessionToken; /*string*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::sessionToken');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSessionToken(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::sessionToken");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSessionToken(): string
    {
        if (EstadoTransaccionResponse::validateSessionToken($this->sessionToken)) {
            return $this->sessionToken;
        }
        throw new Exception('never get to getSessionToken EstadoTransaccionResponse::sessionToken');
    }

    /**
     * @return string
     */
    public static function sampleSessionToken(): string
    {
        return 'EstadoTransaccionResponse::sessionToken::52'; /*52:sessionToken*/
    }

    /**
     * @param null $value
     * @throws Exception
     * @return Object
     */
    public static function fromSubscription(null $value): Object | null
    {
        return $value; /*null*/
    }

    /**
     * @throws Exception
     * @return null
     */
    public function toSubscription(): Object | null
    {
        if (EstadoTransaccionResponse::validateSubscription($this->subscription)) {
            return $this->subscription; /*null*/
        }
        throw new Exception('never get to this EstadoTransaccionResponse::subscription');
    }

    /**
     * @param Object
     * @return bool
     * @throws Exception
     */
    public static function validateSubscription(Object $value): bool
    {
        if (!is_null($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::subscription");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return Object
     */
    public function getSubscription(): Object
    {
        if (EstadoTransaccionResponse::validateSubscription($this->subscription)) {
            return $this->subscription;
        }
        throw new Exception('never get to getSubscription EstadoTransaccionResponse::subscription');
    }

    /**
     * @return Object
     */
    public static function sampleSubscription(): Object | null
    {
        return null; /*53:subscription*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromSubservicesArray(array $value): array
    {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toSubservicesArray(): array
    {
        if (EstadoTransaccionResponse::validateSubservicesArray($this->subservicesArray)) {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->subservicesArray);
        }
        throw new Exception('never get to this EstadoTransaccionResponse::subservicesArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateSubservicesArray(array $value): bool
    {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:EstadoTransaccionResponse::subservicesArray");
        }
        array_walk($value, function ($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:EstadoTransaccionResponse::subservicesArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getSubservicesArray(): array
    {
        if (EstadoTransaccionResponse::validateSubservicesArray($this->subservicesArray)) {
            return $this->subservicesArray;
        }
        throw new Exception('never get to getSubservicesArray EstadoTransaccionResponse::subservicesArray');
    }

    /**
     * @return array
     */
    public static function sampleSubservicesArray(): array
    {
        return  array(
            'AnyType::EstadoTransaccionResponse::::54'/*54:*/
        ); /* 54:subservicesArray*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return EstadoTransaccionResponse::validateEntityCode($this->entityCode)
            || EstadoTransaccionResponse::validateTicketID($this->ticketID)
            || EstadoTransaccionResponse::validateTrazabilityCode($this->trazabilityCode)
            || EstadoTransaccionResponse::validateTranState($this->tranState)
            || EstadoTransaccionResponse::validateReturnCode($this->returnCode)
            || EstadoTransaccionResponse::validateTransValue($this->transValue)
            || EstadoTransaccionResponse::validateTransVatValue($this->transVatValue)
            || EstadoTransaccionResponse::validatePayCurrency($this->payCurrency)
            || EstadoTransaccionResponse::validateCurrencyRate($this->currencyRate)
            || EstadoTransaccionResponse::validateBankProcessDate($this->bankProcessDate)
            || EstadoTransaccionResponse::validateFiCode($this->fiCode)
            || EstadoTransaccionResponse::validateFiName($this->fiName)
            || EstadoTransaccionResponse::validatePaymentSystem($this->paymentSystem)
            || EstadoTransaccionResponse::validateTransCycle($this->transCycle)
            || EstadoTransaccionResponse::validateInvoice($this->invoice)
            || EstadoTransaccionResponse::validateReferenceArray($this->referenceArray)
            || EstadoTransaccionResponse::validateOperationArray($this->operationArray)
            || EstadoTransaccionResponse::validateSrvCode($this->srvCode)
            || EstadoTransaccionResponse::validatePaymentDesc($this->paymentDesc)
            || EstadoTransaccionResponse::validatePaymentInfoArray($this->paymentInfoArray)
            || EstadoTransaccionResponse::validatePaymentsArray($this->paymentsArray)
            || EstadoTransaccionResponse::validateSessionToken($this->sessionToken)
            || EstadoTransaccionResponse::validateSubscription($this->subscription)
            || EstadoTransaccionResponse::validateSubservicesArray($this->subservicesArray);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'EntityCode'} = $this->toEntityCode();
        $out->{'TicketId'} = $this->toTicketID();
        $out->{'TrazabilityCode'} = $this->toTrazabilityCode();
        $out->{'TranState'} = $this->toTranState();
        $out->{'ReturnCode'} = $this->toReturnCode();
        $out->{'TransValue'} = $this->toTransValue();
        $out->{'TransVatValue'} = $this->toTransVatValue();
        $out->{'PayCurrency'} = $this->toPayCurrency();
        $out->{'CurrencyRate'} = $this->toCurrencyRate();
        $out->{'BankProcessDate'} = $this->toBankProcessDate();
        $out->{'FICode'} = $this->toFiCode();
        $out->{'FiName'} = $this->toFiName();
        $out->{'PaymentSystem'} = $this->toPaymentSystem();
        $out->{'TransCycle'} = $this->toTransCycle();
        $out->{'Invoice'} = $this->toInvoice();
        $out->{'ReferenceArray'} = $this->toReferenceArray();
        $out->{'OperationArray'} = $this->toOperationArray();
        $out->{'SrvCode'} = $this->toSrvCode();
        $out->{'PaymentDesc'} = $this->toPaymentDesc();
        $out->{'PaymentInfoArray'} = $this->toPaymentInfoArray();
        $out->{'PaymentsArray'} = $this->toPaymentsArray();
        $out->{'SessionToken'} = $this->toSessionToken();
        $out->{'Subscription'} = $this->toSubscription();
        $out->{'SubservicesArray'} = $this->toSubservicesArray();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return EstadoTransaccionResponse
     * @throws Exception
     */
    public static function from(stdClass $obj): EstadoTransaccionResponse
    {
        return new EstadoTransaccionResponse(
            EstadoTransaccionResponse::fromEntityCode($obj->{'EntityCode'}),
            EstadoTransaccionResponse::fromTicketID($obj->{'TicketId'}),
            EstadoTransaccionResponse::fromTrazabilityCode($obj->{'TrazabilityCode'}),
            EstadoTransaccionResponse::fromTranState($obj->{'TranState'}),
            EstadoTransaccionResponse::fromReturnCode($obj->{'ReturnCode'}),
            EstadoTransaccionResponse::fromTransValue($obj->{'TransValue'}),
            EstadoTransaccionResponse::fromTransVatValue($obj->{'TransVatValue'}),
            EstadoTransaccionResponse::fromPayCurrency($obj->{'PayCurrency'}),
            EstadoTransaccionResponse::fromCurrencyRate($obj->{'CurrencyRate'}),
            EstadoTransaccionResponse::fromBankProcessDate($obj->{'BankProcessDate'}),
            EstadoTransaccionResponse::fromFiCode($obj->{'FICode'}),
            EstadoTransaccionResponse::fromFiName($obj->{'FiName'}),
            EstadoTransaccionResponse::fromPaymentSystem($obj->{'PaymentSystem'}),
            EstadoTransaccionResponse::fromTransCycle($obj->{'TransCycle'}),
            EstadoTransaccionResponse::fromInvoice($obj->{'Invoice'}),
            EstadoTransaccionResponse::fromReferenceArray($obj->{'ReferenceArray'}),
            EstadoTransaccionResponse::fromOperationArray($obj->{'OperationArray'}),
            EstadoTransaccionResponse::fromSrvCode($obj->{'SrvCode'}),
            EstadoTransaccionResponse::fromPaymentDesc($obj->{'PaymentDesc'}),
            EstadoTransaccionResponse::fromPaymentInfoArray($obj->{'PaymentInfoArray'}),
            EstadoTransaccionResponse::fromPaymentsArray($obj->{'PaymentsArray'}),
            EstadoTransaccionResponse::fromSessionToken($obj->{'SessionToken'}),
            EstadoTransaccionResponse::fromSubscription($obj->{'Subscription'}),
            EstadoTransaccionResponse::fromSubservicesArray($obj->{'SubservicesArray'})
        );
    }

    /**
     * @return EstadoTransaccionResponse
     */
    public static function sample(): EstadoTransaccionResponse
    {
        return new EstadoTransaccionResponse(
            EstadoTransaccionResponse::sampleEntityCode(),
            EstadoTransaccionResponse::sampleTicketID(),
            EstadoTransaccionResponse::sampleTrazabilityCode(),
            EstadoTransaccionResponse::sampleTranState(),
            EstadoTransaccionResponse::sampleReturnCode(),
            EstadoTransaccionResponse::sampleTransValue(),
            EstadoTransaccionResponse::sampleTransVatValue(),
            EstadoTransaccionResponse::samplePayCurrency(),
            EstadoTransaccionResponse::sampleCurrencyRate(),
            EstadoTransaccionResponse::sampleBankProcessDate(),
            EstadoTransaccionResponse::sampleFiCode(),
            EstadoTransaccionResponse::sampleFiName(),
            EstadoTransaccionResponse::samplePaymentSystem(),
            EstadoTransaccionResponse::sampleTransCycle(),
            EstadoTransaccionResponse::sampleInvoice(),
            EstadoTransaccionResponse::sampleReferenceArray(),
            EstadoTransaccionResponse::sampleOperationArray(),
            EstadoTransaccionResponse::sampleSrvCode(),
            EstadoTransaccionResponse::samplePaymentDesc(),
            EstadoTransaccionResponse::samplePaymentInfoArray(),
            EstadoTransaccionResponse::samplePaymentsArray(),
            EstadoTransaccionResponse::sampleSessionToken(),
            EstadoTransaccionResponse::sampleSubscription(),
            EstadoTransaccionResponse::sampleSubservicesArray()
        );
    }
}

// This is a autogenerated file:PaymentInfoArray

class PaymentInfoArray
{
    private int $attributeCode; // json:AttributeCode Required
    private string $attributeDesc; // json:AttributeDesc Required
    private string $attributeValue; // json:AttributeValue Required

    /**
     * @param int $attributeCode
     * @param string $attributeDesc
     * @param string $attributeValue
     */
    public function __construct(int $attributeCode, string $attributeDesc, string $attributeValue)
    {
        $this->attributeCode = $attributeCode;
        $this->attributeDesc = $attributeDesc;
        $this->attributeValue = $attributeValue;
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromAttributeCode(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toAttributeCode(): int
    {
        if (PaymentInfoArray::validateAttributeCode($this->attributeCode)) {
            return $this->attributeCode; /*int*/
        }
        throw new Exception('never get to this PaymentInfoArray::attributeCode');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateAttributeCode(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:PaymentInfoArray::attributeCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getAttributeCode(): int
    {
        if (PaymentInfoArray::validateAttributeCode($this->attributeCode)) {
            return $this->attributeCode;
        }
        throw new Exception('never get to getAttributeCode PaymentInfoArray::attributeCode');
    }

    /**
     * @return int
     */
    public static function sampleAttributeCode(): int
    {
        return 31; /*31:attributeCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAttributeDesc(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAttributeDesc(): string
    {
        if (PaymentInfoArray::validateAttributeDesc($this->attributeDesc)) {
            return $this->attributeDesc; /*string*/
        }
        throw new Exception('never get to this PaymentInfoArray::attributeDesc');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAttributeDesc(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentInfoArray::attributeDesc");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAttributeDesc(): string
    {
        if (PaymentInfoArray::validateAttributeDesc($this->attributeDesc)) {
            return $this->attributeDesc;
        }
        throw new Exception('never get to getAttributeDesc PaymentInfoArray::attributeDesc');
    }

    /**
     * @return string
     */
    public static function sampleAttributeDesc(): string
    {
        return 'PaymentInfoArray::attributeDesc::32'; /*32:attributeDesc*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAttributeValue(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAttributeValue(): string
    {
        if (PaymentInfoArray::validateAttributeValue($this->attributeValue)) {
            return $this->attributeValue; /*string*/
        }
        throw new Exception('never get to this PaymentInfoArray::attributeValue');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAttributeValue(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentInfoArray::attributeValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAttributeValue(): string
    {
        if (PaymentInfoArray::validateAttributeValue($this->attributeValue)) {
            return $this->attributeValue;
        }
        throw new Exception('never get to getAttributeValue PaymentInfoArray::attributeValue');
    }

    /**
     * @return string
     */
    public static function sampleAttributeValue(): string
    {
        return 'PaymentInfoArray::attributeValue::33'; /*33:attributeValue*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return PaymentInfoArray::validateAttributeCode($this->attributeCode)
            || PaymentInfoArray::validateAttributeDesc($this->attributeDesc)
            || PaymentInfoArray::validateAttributeValue($this->attributeValue);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'AttributeCode'} = $this->toAttributeCode();
        $out->{'AttributeDesc'} = $this->toAttributeDesc();
        $out->{'AttributeValue'} = $this->toAttributeValue();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return PaymentInfoArray
     * @throws Exception
     */
    public static function from(stdClass $obj): PaymentInfoArray
    {
        return new PaymentInfoArray(
            PaymentInfoArray::fromAttributeCode($obj->{'AttributeCode'}),
            PaymentInfoArray::fromAttributeDesc($obj->{'AttributeDesc'}),
            PaymentInfoArray::fromAttributeValue($obj->{'AttributeValue'})
        );
    }

    /**
     * @return PaymentInfoArray
     */
    public static function sample(): PaymentInfoArray
    {
        return new PaymentInfoArray(
            PaymentInfoArray::sampleAttributeCode(),
            PaymentInfoArray::sampleAttributeDesc(),
            PaymentInfoArray::sampleAttributeValue()
        );
    }
}

// This is a autogenerated file:PaymentsArray

class PaymentsArray
{
    private string $paymentSystem; // json:PaymentSystem Required
    private string $fiCode; // json:FICode Required
    private string $fiName; // json:FIName Required
    private DateTime $bankProcessDate; // json:BankProcessDate Required
    private string $trazabilityCode; // json:TrazabilityCode Required
    private int $transValue; // json:TransValue Required
    private int $transVatValue; // json:TransVatValue Required
    private string $transCycle; // json:TransCycle Required
    private string $payCurrency; // json:PayCurrency Required
    private int $currencyRate; // json:CurrencyRate Required
    private DateTime $accountingDate; // json:AccountingDate Required
    private string $accountType; // json:AccountType Required
    private string $accountNumber; // json:AccountNumber Required
    private string $maskedCard; // json:MaskedCard Required
    private string $entityCode; // json:EntityCode Required
    private string $ticketID; // json:TicketId Required
    private string $tranState; // json:TranState Required
    private int $terms; // json:Terms Required
    private string $respMessage; // json:RespMessage Required

    /**
     * @param string $paymentSystem
     * @param string $fiCode
     * @param string $fiName
     * @param DateTime $bankProcessDate
     * @param string $trazabilityCode
     * @param int $transValue
     * @param int $transVatValue
     * @param string $transCycle
     * @param string $payCurrency
     * @param int $currencyRate
     * @param DateTime $accountingDate
     * @param string $accountType
     * @param string $accountNumber
     * @param string $maskedCard
     * @param string $entityCode
     * @param string $ticketID
     * @param string $tranState
     * @param int $terms
     * @param string $respMessage
     */
    public function __construct(string $paymentSystem, string $fiCode, string $fiName, DateTime $bankProcessDate, string $trazabilityCode, int $transValue, int $transVatValue, string $transCycle, string $payCurrency, int $currencyRate, DateTime $accountingDate, string $accountType, string $accountNumber, string $maskedCard, string $entityCode, string $ticketID, string $tranState, int $terms, string $respMessage)
    {
        $this->paymentSystem = $paymentSystem;
        $this->fiCode = $fiCode;
        $this->fiName = $fiName;
        $this->bankProcessDate = $bankProcessDate;
        $this->trazabilityCode = $trazabilityCode;
        $this->transValue = $transValue;
        $this->transVatValue = $transVatValue;
        $this->transCycle = $transCycle;
        $this->payCurrency = $payCurrency;
        $this->currencyRate = $currencyRate;
        $this->accountingDate = $accountingDate;
        $this->accountType = $accountType;
        $this->accountNumber = $accountNumber;
        $this->maskedCard = $maskedCard;
        $this->entityCode = $entityCode;
        $this->ticketID = $ticketID;
        $this->tranState = $tranState;
        $this->terms = $terms;
        $this->respMessage = $respMessage;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPaymentSystem(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPaymentSystem(): string
    {
        if (PaymentsArray::validatePaymentSystem($this->paymentSystem)) {
            return $this->paymentSystem; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::paymentSystem');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentSystem(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::paymentSystem");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPaymentSystem(): string
    {
        if (PaymentsArray::validatePaymentSystem($this->paymentSystem)) {
            return $this->paymentSystem;
        }
        throw new Exception('never get to getPaymentSystem PaymentsArray::paymentSystem');
    }

    /**
     * @return string
     */
    public static function samplePaymentSystem(): string
    {
        return 'PaymentsArray::paymentSystem::31'; /*31:paymentSystem*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFiCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFiCode(): string
    {
        if (PaymentsArray::validateFiCode($this->fiCode)) {
            return $this->fiCode; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::fiCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFiCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::fiCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFiCode(): string
    {
        if (PaymentsArray::validateFiCode($this->fiCode)) {
            return $this->fiCode;
        }
        throw new Exception('never get to getFiCode PaymentsArray::fiCode');
    }

    /**
     * @return string
     */
    public static function sampleFiCode(): string
    {
        return 'PaymentsArray::fiCode::32'; /*32:fiCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFiName(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFiName(): string
    {
        if (PaymentsArray::validateFiName($this->fiName)) {
            return $this->fiName; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::fiName');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFiName(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::fiName");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFiName(): string
    {
        if (PaymentsArray::validateFiName($this->fiName)) {
            return $this->fiName;
        }
        throw new Exception('never get to getFiName PaymentsArray::fiName');
    }

    /**
     * @return string
     */
    public static function sampleFiName(): string
    {
        return 'PaymentsArray::fiName::33'; /*33:fiName*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return DateTime
     */
    public static function fromBankProcessDate(string $value): DateTime
    {
        $tmp = DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, $value);
        if (!is_a($tmp, 'DateTime')) {
            throw new Exception('Attribute Error:PaymentsArray::');
        }
        return $tmp;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toBankProcessDate(): string
    {
        if (PaymentsArray::validateBankProcessDate($this->bankProcessDate)) {
            return $this->bankProcessDate->format(DateTimeInterface::ISO8601_EXPANDED);
        }
        throw new Exception('never get to this PaymentsArray::bankProcessDate');
    }

    /**
     * @param DateTime
     * @return bool
     * @throws Exception
     */
    public static function validateBankProcessDate(DateTime $value): bool
    {
        if (!is_a($value, 'DateTime')) {
            throw new Exception('Attribute Error:PaymentsArray::bankProcessDate');
        }
        return true;
    }

    /**
     * @throws Exception
     * @return DateTime
     */
    public function getBankProcessDate(): DateTime
    {
        if (PaymentsArray::validateBankProcessDate($this->bankProcessDate)) {
            return $this->bankProcessDate;
        }
        throw new Exception('never get to getBankProcessDate PaymentsArray::bankProcessDate');
    }

    /**
     * @return DateTime
     */
    public static function sampleBankProcessDate(): DateTime
    {
        return DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, '2020-12-40T12:40:40+00:00');
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTrazabilityCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTrazabilityCode(): string
    {
        if (PaymentsArray::validateTrazabilityCode($this->trazabilityCode)) {
            return $this->trazabilityCode; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::trazabilityCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTrazabilityCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::trazabilityCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTrazabilityCode(): string
    {
        if (PaymentsArray::validateTrazabilityCode($this->trazabilityCode)) {
            return $this->trazabilityCode;
        }
        throw new Exception('never get to getTrazabilityCode PaymentsArray::trazabilityCode');
    }

    /**
     * @return string
     */
    public static function sampleTrazabilityCode(): string
    {
        return 'PaymentsArray::trazabilityCode::35'; /*35:trazabilityCode*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTransValue(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTransValue(): int
    {
        if (PaymentsArray::validateTransValue($this->transValue)) {
            return $this->transValue; /*int*/
        }
        throw new Exception('never get to this PaymentsArray::transValue');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTransValue(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:PaymentsArray::transValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTransValue(): int
    {
        if (PaymentsArray::validateTransValue($this->transValue)) {
            return $this->transValue;
        }
        throw new Exception('never get to getTransValue PaymentsArray::transValue');
    }

    /**
     * @return int
     */
    public static function sampleTransValue(): int
    {
        return 36; /*36:transValue*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTransVatValue(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTransVatValue(): int
    {
        if (PaymentsArray::validateTransVatValue($this->transVatValue)) {
            return $this->transVatValue; /*int*/
        }
        throw new Exception('never get to this PaymentsArray::transVatValue');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTransVatValue(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:PaymentsArray::transVatValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTransVatValue(): int
    {
        if (PaymentsArray::validateTransVatValue($this->transVatValue)) {
            return $this->transVatValue;
        }
        throw new Exception('never get to getTransVatValue PaymentsArray::transVatValue');
    }

    /**
     * @return int
     */
    public static function sampleTransVatValue(): int
    {
        return 37; /*37:transVatValue*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTransCycle(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTransCycle(): string
    {
        if (PaymentsArray::validateTransCycle($this->transCycle)) {
            return $this->transCycle; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::transCycle');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTransCycle(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::transCycle");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTransCycle(): string
    {
        if (PaymentsArray::validateTransCycle($this->transCycle)) {
            return $this->transCycle;
        }
        throw new Exception('never get to getTransCycle PaymentsArray::transCycle');
    }

    /**
     * @return string
     */
    public static function sampleTransCycle(): string
    {
        return 'PaymentsArray::transCycle::38'; /*38:transCycle*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPayCurrency(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPayCurrency(): string
    {
        if (PaymentsArray::validatePayCurrency($this->payCurrency)) {
            return $this->payCurrency; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::payCurrency');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePayCurrency(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::payCurrency");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPayCurrency(): string
    {
        if (PaymentsArray::validatePayCurrency($this->payCurrency)) {
            return $this->payCurrency;
        }
        throw new Exception('never get to getPayCurrency PaymentsArray::payCurrency');
    }

    /**
     * @return string
     */
    public static function samplePayCurrency(): string
    {
        return 'PaymentsArray::payCurrency::39'; /*39:payCurrency*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromCurrencyRate(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toCurrencyRate(): int
    {
        if (PaymentsArray::validateCurrencyRate($this->currencyRate)) {
            return $this->currencyRate; /*int*/
        }
        throw new Exception('never get to this PaymentsArray::currencyRate');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateCurrencyRate(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:PaymentsArray::currencyRate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getCurrencyRate(): int
    {
        if (PaymentsArray::validateCurrencyRate($this->currencyRate)) {
            return $this->currencyRate;
        }
        throw new Exception('never get to getCurrencyRate PaymentsArray::currencyRate');
    }

    /**
     * @return int
     */
    public static function sampleCurrencyRate(): int
    {
        return 40; /*40:currencyRate*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return DateTime
     */
    public static function fromAccountingDate(string $value): DateTime
    {
        $tmp = DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, $value);
        if (!is_a($tmp, 'DateTime')) {
            throw new Exception('Attribute Error:PaymentsArray::');
        }
        return $tmp;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAccountingDate(): string
    {
        if (PaymentsArray::validateAccountingDate($this->accountingDate)) {
            return $this->accountingDate->format(DateTimeInterface::ISO8601_EXPANDED);
        }
        throw new Exception('never get to this PaymentsArray::accountingDate');
    }

    /**
     * @param DateTime
     * @return bool
     * @throws Exception
     */
    public static function validateAccountingDate(DateTime $value): bool
    {
        if (!is_a($value, 'DateTime')) {
            throw new Exception('Attribute Error:PaymentsArray::accountingDate');
        }
        return true;
    }

    /**
     * @throws Exception
     * @return DateTime
     */
    public function getAccountingDate(): DateTime
    {
        if (PaymentsArray::validateAccountingDate($this->accountingDate)) {
            return $this->accountingDate;
        }
        throw new Exception('never get to getAccountingDate PaymentsArray::accountingDate');
    }

    /**
     * @return DateTime
     */
    public static function sampleAccountingDate(): DateTime
    {
        return DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, '2020-12-11T12:11:11+00:00');
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAccountType(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAccountType(): string
    {
        if (PaymentsArray::validateAccountType($this->accountType)) {
            return $this->accountType; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::accountType');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAccountType(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::accountType");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAccountType(): string
    {
        if (PaymentsArray::validateAccountType($this->accountType)) {
            return $this->accountType;
        }
        throw new Exception('never get to getAccountType PaymentsArray::accountType');
    }

    /**
     * @return string
     */
    public static function sampleAccountType(): string
    {
        return 'PaymentsArray::accountType::42'; /*42:accountType*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAccountNumber(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAccountNumber(): string
    {
        if (PaymentsArray::validateAccountNumber($this->accountNumber)) {
            return $this->accountNumber; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::accountNumber');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAccountNumber(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::accountNumber");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAccountNumber(): string
    {
        if (PaymentsArray::validateAccountNumber($this->accountNumber)) {
            return $this->accountNumber;
        }
        throw new Exception('never get to getAccountNumber PaymentsArray::accountNumber');
    }

    /**
     * @return string
     */
    public static function sampleAccountNumber(): string
    {
        return 'PaymentsArray::accountNumber::43'; /*43:accountNumber*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromMaskedCard(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toMaskedCard(): string
    {
        if (PaymentsArray::validateMaskedCard($this->maskedCard)) {
            return $this->maskedCard; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::maskedCard');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateMaskedCard(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::maskedCard");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getMaskedCard(): string
    {
        if (PaymentsArray::validateMaskedCard($this->maskedCard)) {
            return $this->maskedCard;
        }
        throw new Exception('never get to getMaskedCard PaymentsArray::maskedCard');
    }

    /**
     * @return string
     */
    public static function sampleMaskedCard(): string
    {
        return 'PaymentsArray::maskedCard::44'; /*44:maskedCard*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromEntityCode(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toEntityCode(): string
    {
        if (PaymentsArray::validateEntityCode($this->entityCode)) {
            return $this->entityCode; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::entityCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateEntityCode(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::entityCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getEntityCode(): string
    {
        if (PaymentsArray::validateEntityCode($this->entityCode)) {
            return $this->entityCode;
        }
        throw new Exception('never get to getEntityCode PaymentsArray::entityCode');
    }

    /**
     * @return string
     */
    public static function sampleEntityCode(): string
    {
        return 'PaymentsArray::entityCode::45'; /*45:entityCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTicketID(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTicketID(): string
    {
        if (PaymentsArray::validateTicketID($this->ticketID)) {
            return $this->ticketID; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::ticketID');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTicketID(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::ticketID");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTicketID(): string
    {
        if (PaymentsArray::validateTicketID($this->ticketID)) {
            return $this->ticketID;
        }
        throw new Exception('never get to getTicketID PaymentsArray::ticketID');
    }

    /**
     * @return string
     */
    public static function sampleTicketID(): string
    {
        return 'PaymentsArray::ticketID::46'; /*46:ticketID*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTranState(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTranState(): string
    {
        if (PaymentsArray::validateTranState($this->tranState)) {
            return $this->tranState; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::tranState');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTranState(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::tranState");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTranState(): string
    {
        if (PaymentsArray::validateTranState($this->tranState)) {
            return $this->tranState;
        }
        throw new Exception('never get to getTranState PaymentsArray::tranState');
    }

    /**
     * @return string
     */
    public static function sampleTranState(): string
    {
        return 'PaymentsArray::tranState::47'; /*47:tranState*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTerms(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTerms(): int
    {
        if (PaymentsArray::validateTerms($this->terms)) {
            return $this->terms; /*int*/
        }
        throw new Exception('never get to this PaymentsArray::terms');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTerms(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:PaymentsArray::terms");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTerms(): int
    {
        if (PaymentsArray::validateTerms($this->terms)) {
            return $this->terms;
        }
        throw new Exception('never get to getTerms PaymentsArray::terms');
    }

    /**
     * @return int
     */
    public static function sampleTerms(): int
    {
        return 48; /*48:terms*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRespMessage(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toRespMessage(): string
    {
        if (PaymentsArray::validateRespMessage($this->respMessage)) {
            return $this->respMessage; /*string*/
        }
        throw new Exception('never get to this PaymentsArray::respMessage');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRespMessage(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:PaymentsArray::respMessage");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getRespMessage(): string
    {
        if (PaymentsArray::validateRespMessage($this->respMessage)) {
            return $this->respMessage;
        }
        throw new Exception('never get to getRespMessage PaymentsArray::respMessage');
    }

    /**
     * @return string
     */
    public static function sampleRespMessage(): string
    {
        return 'PaymentsArray::respMessage::49'; /*49:respMessage*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return PaymentsArray::validatePaymentSystem($this->paymentSystem)
            || PaymentsArray::validateFiCode($this->fiCode)
            || PaymentsArray::validateFiName($this->fiName)
            || PaymentsArray::validateBankProcessDate($this->bankProcessDate)
            || PaymentsArray::validateTrazabilityCode($this->trazabilityCode)
            || PaymentsArray::validateTransValue($this->transValue)
            || PaymentsArray::validateTransVatValue($this->transVatValue)
            || PaymentsArray::validateTransCycle($this->transCycle)
            || PaymentsArray::validatePayCurrency($this->payCurrency)
            || PaymentsArray::validateCurrencyRate($this->currencyRate)
            || PaymentsArray::validateAccountingDate($this->accountingDate)
            || PaymentsArray::validateAccountType($this->accountType)
            || PaymentsArray::validateAccountNumber($this->accountNumber)
            || PaymentsArray::validateMaskedCard($this->maskedCard)
            || PaymentsArray::validateEntityCode($this->entityCode)
            || PaymentsArray::validateTicketID($this->ticketID)
            || PaymentsArray::validateTranState($this->tranState)
            || PaymentsArray::validateTerms($this->terms)
            || PaymentsArray::validateRespMessage($this->respMessage);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'PaymentSystem'} = $this->toPaymentSystem();
        $out->{'FICode'} = $this->toFiCode();
        $out->{'FIName'} = $this->toFiName();
        $out->{'BankProcessDate'} = $this->toBankProcessDate();
        $out->{'TrazabilityCode'} = $this->toTrazabilityCode();
        $out->{'TransValue'} = $this->toTransValue();
        $out->{'TransVatValue'} = $this->toTransVatValue();
        $out->{'TransCycle'} = $this->toTransCycle();
        $out->{'PayCurrency'} = $this->toPayCurrency();
        $out->{'CurrencyRate'} = $this->toCurrencyRate();
        $out->{'AccountingDate'} = $this->toAccountingDate();
        $out->{'AccountType'} = $this->toAccountType();
        $out->{'AccountNumber'} = $this->toAccountNumber();
        $out->{'MaskedCard'} = $this->toMaskedCard();
        $out->{'EntityCode'} = $this->toEntityCode();
        $out->{'TicketId'} = $this->toTicketID();
        $out->{'TranState'} = $this->toTranState();
        $out->{'Terms'} = $this->toTerms();
        $out->{'RespMessage'} = $this->toRespMessage();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return PaymentsArray
     * @throws Exception
     */
    public static function from(stdClass $obj): PaymentsArray
    {
        return new PaymentsArray(
            PaymentsArray::fromPaymentSystem($obj->{'PaymentSystem'}),
            PaymentsArray::fromFiCode($obj->{'FICode'}),
            PaymentsArray::fromFiName($obj->{'FIName'}),
            PaymentsArray::fromBankProcessDate($obj->{'BankProcessDate'}),
            PaymentsArray::fromTrazabilityCode($obj->{'TrazabilityCode'}),
            PaymentsArray::fromTransValue($obj->{'TransValue'}),
            PaymentsArray::fromTransVatValue($obj->{'TransVatValue'}),
            PaymentsArray::fromTransCycle($obj->{'TransCycle'}),
            PaymentsArray::fromPayCurrency($obj->{'PayCurrency'}),
            PaymentsArray::fromCurrencyRate($obj->{'CurrencyRate'}),
            PaymentsArray::fromAccountingDate($obj->{'AccountingDate'}),
            PaymentsArray::fromAccountType($obj->{'AccountType'}),
            PaymentsArray::fromAccountNumber($obj->{'AccountNumber'}),
            PaymentsArray::fromMaskedCard($obj->{'MaskedCard'}),
            PaymentsArray::fromEntityCode($obj->{'EntityCode'}),
            PaymentsArray::fromTicketID($obj->{'TicketId'}),
            PaymentsArray::fromTranState($obj->{'TranState'}),
            PaymentsArray::fromTerms($obj->{'Terms'}),
            PaymentsArray::fromRespMessage($obj->{'RespMessage'})
        );
    }

    /**
     * @return PaymentsArray
     */
    public static function sample(): PaymentsArray
    {
        return new PaymentsArray(
            PaymentsArray::samplePaymentSystem(),
            PaymentsArray::sampleFiCode(),
            PaymentsArray::sampleFiName(),
            PaymentsArray::sampleBankProcessDate(),
            PaymentsArray::sampleTrazabilityCode(),
            PaymentsArray::sampleTransValue(),
            PaymentsArray::sampleTransVatValue(),
            PaymentsArray::sampleTransCycle(),
            PaymentsArray::samplePayCurrency(),
            PaymentsArray::sampleCurrencyRate(),
            PaymentsArray::sampleAccountingDate(),
            PaymentsArray::sampleAccountType(),
            PaymentsArray::sampleAccountNumber(),
            PaymentsArray::sampleMaskedCard(),
            PaymentsArray::sampleEntityCode(),
            PaymentsArray::sampleTicketID(),
            PaymentsArray::sampleTranState(),
            PaymentsArray::sampleTerms(),
            PaymentsArray::sampleRespMessage()
        );
    }
}
