<?php

namespace App\Interfaces;

use DateTime;
use DateTimeInterface;
use Exception;
use stdClass;

// This is a autogenerated file:IniciarTransaccionResponse

class IniciarTransaccionResponse {
    private string $returnCode; // json:ReturnCode Required
    private string $ticketID; // json:TicketId Required
    private string $eCollectURL; // json:eCollectUrl Required
    private string $returnDesc; // json:ReturnDesc Required
    private int $lifetimeSecs; // json:LifetimeSecs Required
    private TransactionResponse $transactionResponse; // json:TransactionResponse Required
    private array $subservicesArray; // json:SubservicesArray Required

    /**
     * @param string $returnCode
     * @param string $ticketID
     * @param string $eCollectURL
     * @param string $returnDesc
     * @param int $lifetimeSecs
     * @param TransactionResponse $transactionResponse
     * @param array $subservicesArray
     */
    public function __construct(string $returnCode, string $ticketID, string $eCollectURL, string $returnDesc, int $lifetimeSecs, TransactionResponse $transactionResponse, array $subservicesArray) {
        $this->returnCode = $returnCode;
        $this->ticketID = $ticketID;
        $this->eCollectURL = $eCollectURL;
        $this->returnDesc = $returnDesc;
        $this->lifetimeSecs = $lifetimeSecs;
        $this->transactionResponse = $transactionResponse;
        $this->subservicesArray = $subservicesArray;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromReturnCode(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toReturnCode(): string {
        if (IniciarTransaccionResponse::validateReturnCode($this->returnCode))  {
            return $this->returnCode; /*string*/
        }
        throw new Exception('never get to this IniciarTransaccionResponse::returnCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateReturnCode(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:IniciarTransaccionResponse::returnCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getReturnCode(): string {
        if (IniciarTransaccionResponse::validateReturnCode($this->returnCode))  {
            return $this->returnCode;
        }
        throw new Exception('never get to getReturnCode IniciarTransaccionResponse::returnCode');
    }

    /**
     * @return string
     */
    public static function sampleReturnCode(): string {
        return 'IniciarTransaccionResponse::returnCode::31'; /*31:returnCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTicketID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTicketID(): string {
        if (IniciarTransaccionResponse::validateTicketID($this->ticketID))  {
            return $this->ticketID; /*string*/
        }
        throw new Exception('never get to this IniciarTransaccionResponse::ticketID');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTicketID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:IniciarTransaccionResponse::ticketID");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTicketID(): string {
        if (IniciarTransaccionResponse::validateTicketID($this->ticketID))  {
            return $this->ticketID;
        }
        throw new Exception('never get to getTicketID IniciarTransaccionResponse::ticketID');
    }

    /**
     * @return string
     */
    public static function sampleTicketID(): string {
        return 'IniciarTransaccionResponse::ticketID::32'; /*32:ticketID*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromECollectURL(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toECollectURL(): string {
        if (IniciarTransaccionResponse::validateECollectURL($this->eCollectURL))  {
            return $this->eCollectURL; /*string*/
        }
        throw new Exception('never get to this IniciarTransaccionResponse::eCollectURL');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateECollectURL(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:IniciarTransaccionResponse::eCollectURL");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getECollectURL(): string {
        if (IniciarTransaccionResponse::validateECollectURL($this->eCollectURL))  {
            return $this->eCollectURL;
        }
        throw new Exception('never get to getECollectURL IniciarTransaccionResponse::eCollectURL');
    }

    /**
     * @return string
     */
    public static function sampleECollectURL(): string {
        return 'IniciarTransaccionResponse::eCollectURL::33'; /*33:eCollectURL*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromReturnDesc(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toReturnDesc(): string {
        if (IniciarTransaccionResponse::validateReturnDesc($this->returnDesc))  {
            return $this->returnDesc; /*string*/
        }
        throw new Exception('never get to this IniciarTransaccionResponse::returnDesc');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateReturnDesc(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:IniciarTransaccionResponse::returnDesc");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getReturnDesc(): string {
        if (IniciarTransaccionResponse::validateReturnDesc($this->returnDesc))  {
            return $this->returnDesc;
        }
        throw new Exception('never get to getReturnDesc IniciarTransaccionResponse::returnDesc');
    }

    /**
     * @return string
     */
    public static function sampleReturnDesc(): string {
        return 'IniciarTransaccionResponse::returnDesc::34'; /*34:returnDesc*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromLifetimeSecs(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toLifetimeSecs(): int {
        if (IniciarTransaccionResponse::validateLifetimeSecs($this->lifetimeSecs))  {
            return $this->lifetimeSecs; /*int*/
        }
        throw new Exception('never get to this IniciarTransaccionResponse::lifetimeSecs');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateLifetimeSecs(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:IniciarTransaccionResponse::lifetimeSecs");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getLifetimeSecs(): int {
        if (IniciarTransaccionResponse::validateLifetimeSecs($this->lifetimeSecs))  {
            return $this->lifetimeSecs;
        }
        throw new Exception('never get to getLifetimeSecs IniciarTransaccionResponse::lifetimeSecs');
    }

    /**
     * @return int
     */
    public static function sampleLifetimeSecs(): int {
        return 35; /*35:lifetimeSecs*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return TransactionResponse
     */
    public static function fromTransactionResponse(stdClass $value): TransactionResponse {
        return TransactionResponse::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toTransactionResponse(): stdClass {
        if (IniciarTransaccionResponse::validateTransactionResponse($this->transactionResponse))  {
            return $this->transactionResponse->to(); /*class*/
        }
        throw new Exception('never get to this IniciarTransaccionResponse::transactionResponse');
    }

    /**
     * @param TransactionResponse
     * @return bool
     * @throws Exception
     */
    public static function validateTransactionResponse(TransactionResponse $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return TransactionResponse
     */
    public function getTransactionResponse(): TransactionResponse {
        if (IniciarTransaccionResponse::validateTransactionResponse($this->transactionResponse))  {
            return $this->transactionResponse;
        }
        throw new Exception('never get to getTransactionResponse IniciarTransaccionResponse::transactionResponse');
    }

    /**
     * @return TransactionResponse
     */
    public static function sampleTransactionResponse(): TransactionResponse {
        return TransactionResponse::sample(); /*36:transactionResponse*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromSubservicesArray(array $value): array {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toSubservicesArray(): array {
        if (IniciarTransaccionResponse::validateSubservicesArray($this->subservicesArray))  {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->subservicesArray);
        }
        throw new Exception('never get to this IniciarTransaccionResponse::subservicesArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateSubservicesArray(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:IniciarTransaccionResponse::subservicesArray");
        }
        array_walk($value, function($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:IniciarTransaccionResponse::subservicesArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getSubservicesArray(): array {
        if (IniciarTransaccionResponse::validateSubservicesArray($this->subservicesArray))  {
            return $this->subservicesArray;
        }
        throw new Exception('never get to getSubservicesArray IniciarTransaccionResponse::subservicesArray');
    }

    /**
     * @return array
     */
    public static function sampleSubservicesArray(): array {
        return  array(
            'AnyType::IniciarTransaccionResponse::::37'/*37:*/
        ); /* 37:subservicesArray*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return IniciarTransaccionResponse::validateReturnCode($this->returnCode)
        || IniciarTransaccionResponse::validateTicketID($this->ticketID)
        || IniciarTransaccionResponse::validateECollectURL($this->eCollectURL)
        || IniciarTransaccionResponse::validateReturnDesc($this->returnDesc)
        || IniciarTransaccionResponse::validateLifetimeSecs($this->lifetimeSecs)
        || IniciarTransaccionResponse::validateTransactionResponse($this->transactionResponse)
        || IniciarTransaccionResponse::validateSubservicesArray($this->subservicesArray);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'ReturnCode'} = $this->toReturnCode();
        $out->{'TicketId'} = $this->toTicketID();
        $out->{'eCollectUrl'} = $this->toECollectURL();
        $out->{'ReturnDesc'} = $this->toReturnDesc();
        $out->{'LifetimeSecs'} = $this->toLifetimeSecs();
        $out->{'TransactionResponse'} = $this->toTransactionResponse();
        $out->{'SubservicesArray'} = $this->toSubservicesArray();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return IniciarTransaccionResponse
     * @throws Exception
     */
    public static function from(stdClass $obj): IniciarTransaccionResponse {
        return new IniciarTransaccionResponse(
         IniciarTransaccionResponse::fromReturnCode($obj->{'ReturnCode'})
        ,IniciarTransaccionResponse::fromTicketID($obj->{'TicketId'})
        ,IniciarTransaccionResponse::fromECollectURL($obj->{'eCollectUrl'})
        ,IniciarTransaccionResponse::fromReturnDesc($obj->{'ReturnDesc'})
        ,IniciarTransaccionResponse::fromLifetimeSecs($obj->{'LifetimeSecs'})
        ,IniciarTransaccionResponse::fromTransactionResponse($obj->{'TransactionResponse'})
        ,IniciarTransaccionResponse::fromSubservicesArray($obj->{'SubservicesArray'})
        );
    }

    /**
     * @return IniciarTransaccionResponse
     */
    public static function sample(): IniciarTransaccionResponse {
        return new IniciarTransaccionResponse(
         IniciarTransaccionResponse::sampleReturnCode()
        ,IniciarTransaccionResponse::sampleTicketID()
        ,IniciarTransaccionResponse::sampleECollectURL()
        ,IniciarTransaccionResponse::sampleReturnDesc()
        ,IniciarTransaccionResponse::sampleLifetimeSecs()
        ,IniciarTransaccionResponse::sampleTransactionResponse()
        ,IniciarTransaccionResponse::sampleSubservicesArray()
        );
    }
}

// This is a autogenerated file:TransactionResponse

class TransactionResponse {
    private string $entityCode; // json:EntityCode Required
    private string $ticketID; // json:TicketId Required
    private string $trazabilityCode; // json:TrazabilityCode Required
    private string $tranState; // json:TranState Required
    private string $returnCode; // json:ReturnCode Required
    private int $transValue; // json:TransValue Required
    private int $transVatValue; // json:TransVatValue Required
    private string $payCurrency; // json:PayCurrency Required
    private int $currencyRate; // json:CurrencyRate Required
    private DateTime $bankProcessDate; // json:BankProcessDate Required
    private string $fiCode; // json:FICode Required
    private string $fiName; // json:FiName Required
    private string $paymentSystem; // json:PaymentSystem Required
    private string $transCycle; // json:TransCycle Required
    private string $invoice; // json:Invoice Required
    private array $referenceArray; // json:ReferenceArray Required
    private array $operationArray; // json:OperationArray Required
    private string $srvCode; // json:SrvCode Required
    private string $paymentDesc; // json:PaymentDesc Required
    private array $paymentInfoArray; // json:PaymentInfoArray Required
    private array $paymentsArray; // json:PaymentsArray Required
    private string $sessionToken; // json:SessionToken Required
    private Object $subscription; // json:Subscription Optional
    private array $subservicesArray; // json:SubservicesArray Required

    /**
     * @param string $entityCode
     * @param string $ticketID
     * @param string $trazabilityCode
     * @param string $tranState
     * @param string $returnCode
     * @param int $transValue
     * @param int $transVatValue
     * @param string $payCurrency
     * @param int $currencyRate
     * @param DateTime $bankProcessDate
     * @param string $fiCode
     * @param string $fiName
     * @param string $paymentSystem
     * @param string $transCycle
     * @param string $invoice
     * @param array $referenceArray
     * @param array $operationArray
     * @param string $srvCode
     * @param string $paymentDesc
     * @param array $paymentInfoArray
     * @param array $paymentsArray
     * @param string $sessionToken
     * @param Object $subscription
     * @param array $subservicesArray
     */
    public function __construct(string $entityCode, string $ticketID, string $trazabilityCode, string $tranState, string $returnCode, int $transValue, int $transVatValue, string $payCurrency, int $currencyRate, DateTime $bankProcessDate, string $fiCode, string $fiName, string $paymentSystem, string $transCycle, string $invoice, array $referenceArray, array $operationArray, string $srvCode, string $paymentDesc, array $paymentInfoArray, array $paymentsArray, string $sessionToken, Object $subscription, array $subservicesArray) {
        $this->entityCode = $entityCode;
        $this->ticketID = $ticketID;
        $this->trazabilityCode = $trazabilityCode;
        $this->tranState = $tranState;
        $this->returnCode = $returnCode;
        $this->transValue = $transValue;
        $this->transVatValue = $transVatValue;
        $this->payCurrency = $payCurrency;
        $this->currencyRate = $currencyRate;
        $this->bankProcessDate = $bankProcessDate;
        $this->fiCode = $fiCode;
        $this->fiName = $fiName;
        $this->paymentSystem = $paymentSystem;
        $this->transCycle = $transCycle;
        $this->invoice = $invoice;
        $this->referenceArray = $referenceArray;
        $this->operationArray = $operationArray;
        $this->srvCode = $srvCode;
        $this->paymentDesc = $paymentDesc;
        $this->paymentInfoArray = $paymentInfoArray;
        $this->paymentsArray = $paymentsArray;
        $this->sessionToken = $sessionToken;
        $this->subscription = $subscription;
        $this->subservicesArray = $subservicesArray;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromEntityCode(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toEntityCode(): string {
        if (TransactionResponse::validateEntityCode($this->entityCode))  {
            return $this->entityCode; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::entityCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateEntityCode(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::entityCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getEntityCode(): string {
        if (TransactionResponse::validateEntityCode($this->entityCode))  {
            return $this->entityCode;
        }
        throw new Exception('never get to getEntityCode TransactionResponse::entityCode');
    }

    /**
     * @return string
     */
    public static function sampleEntityCode(): string {
        return 'TransactionResponse::entityCode::31'; /*31:entityCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTicketID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTicketID(): string {
        if (TransactionResponse::validateTicketID($this->ticketID))  {
            return $this->ticketID; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::ticketID');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTicketID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::ticketID");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTicketID(): string {
        if (TransactionResponse::validateTicketID($this->ticketID))  {
            return $this->ticketID;
        }
        throw new Exception('never get to getTicketID TransactionResponse::ticketID');
    }

    /**
     * @return string
     */
    public static function sampleTicketID(): string {
        return 'TransactionResponse::ticketID::32'; /*32:ticketID*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTrazabilityCode(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTrazabilityCode(): string {
        if (TransactionResponse::validateTrazabilityCode($this->trazabilityCode))  {
            return $this->trazabilityCode; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::trazabilityCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTrazabilityCode(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::trazabilityCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTrazabilityCode(): string {
        if (TransactionResponse::validateTrazabilityCode($this->trazabilityCode))  {
            return $this->trazabilityCode;
        }
        throw new Exception('never get to getTrazabilityCode TransactionResponse::trazabilityCode');
    }

    /**
     * @return string
     */
    public static function sampleTrazabilityCode(): string {
        return 'TransactionResponse::trazabilityCode::33'; /*33:trazabilityCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTranState(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTranState(): string {
        if (TransactionResponse::validateTranState($this->tranState))  {
            return $this->tranState; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::tranState');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTranState(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::tranState");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTranState(): string {
        if (TransactionResponse::validateTranState($this->tranState))  {
            return $this->tranState;
        }
        throw new Exception('never get to getTranState TransactionResponse::tranState');
    }

    /**
     * @return string
     */
    public static function sampleTranState(): string {
        return 'TransactionResponse::tranState::34'; /*34:tranState*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromReturnCode(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toReturnCode(): string {
        if (TransactionResponse::validateReturnCode($this->returnCode))  {
            return $this->returnCode; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::returnCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateReturnCode(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::returnCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getReturnCode(): string {
        if (TransactionResponse::validateReturnCode($this->returnCode))  {
            return $this->returnCode;
        }
        throw new Exception('never get to getReturnCode TransactionResponse::returnCode');
    }

    /**
     * @return string
     */
    public static function sampleReturnCode(): string {
        return 'TransactionResponse::returnCode::35'; /*35:returnCode*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTransValue(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTransValue(): int {
        if (TransactionResponse::validateTransValue($this->transValue))  {
            return $this->transValue; /*int*/
        }
        throw new Exception('never get to this TransactionResponse::transValue');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTransValue(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:TransactionResponse::transValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTransValue(): int {
        if (TransactionResponse::validateTransValue($this->transValue))  {
            return $this->transValue;
        }
        throw new Exception('never get to getTransValue TransactionResponse::transValue');
    }

    /**
     * @return int
     */
    public static function sampleTransValue(): int {
        return 36; /*36:transValue*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromTransVatValue(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toTransVatValue(): int {
        if (TransactionResponse::validateTransVatValue($this->transVatValue))  {
            return $this->transVatValue; /*int*/
        }
        throw new Exception('never get to this TransactionResponse::transVatValue');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateTransVatValue(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:TransactionResponse::transVatValue");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getTransVatValue(): int {
        if (TransactionResponse::validateTransVatValue($this->transVatValue))  {
            return $this->transVatValue;
        }
        throw new Exception('never get to getTransVatValue TransactionResponse::transVatValue');
    }

    /**
     * @return int
     */
    public static function sampleTransVatValue(): int {
        return 37; /*37:transVatValue*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPayCurrency(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPayCurrency(): string {
        if (TransactionResponse::validatePayCurrency($this->payCurrency))  {
            return $this->payCurrency; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::payCurrency');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePayCurrency(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::payCurrency");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPayCurrency(): string {
        if (TransactionResponse::validatePayCurrency($this->payCurrency))  {
            return $this->payCurrency;
        }
        throw new Exception('never get to getPayCurrency TransactionResponse::payCurrency');
    }

    /**
     * @return string
     */
    public static function samplePayCurrency(): string {
        return 'TransactionResponse::payCurrency::38'; /*38:payCurrency*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromCurrencyRate(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toCurrencyRate(): int {
        if (TransactionResponse::validateCurrencyRate($this->currencyRate))  {
            return $this->currencyRate; /*int*/
        }
        throw new Exception('never get to this TransactionResponse::currencyRate');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateCurrencyRate(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:TransactionResponse::currencyRate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getCurrencyRate(): int {
        if (TransactionResponse::validateCurrencyRate($this->currencyRate))  {
            return $this->currencyRate;
        }
        throw new Exception('never get to getCurrencyRate TransactionResponse::currencyRate');
    }

    /**
     * @return int
     */
    public static function sampleCurrencyRate(): int {
        return 39; /*39:currencyRate*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return DateTime
     */
    public static function fromBankProcessDate(string $value): DateTime {
        $tmp = DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, $value);
        if (!is_a($tmp, 'DateTime')) {
            throw new Exception('Attribute Error:TransactionResponse::');
        }
        return $tmp;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toBankProcessDate(): string {
        if (TransactionResponse::validateBankProcessDate($this->bankProcessDate))  {
            return $this->bankProcessDate->format(DateTimeInterface::ISO8601_EXPANDED);
        }
        throw new Exception('never get to this TransactionResponse::bankProcessDate');
    }

    /**
     * @param DateTime
     * @return bool
     * @throws Exception
     */
    public static function validateBankProcessDate(DateTime $value): bool {
        if (!is_a($value, 'DateTime')) {
            throw new Exception('Attribute Error:TransactionResponse::bankProcessDate');
        }
        return true;
    }

    /**
     * @throws Exception
     * @return DateTime
     */
    public function getBankProcessDate(): DateTime {
        if (TransactionResponse::validateBankProcessDate($this->bankProcessDate))  {
            return $this->bankProcessDate;
        }
        throw new Exception('never get to getBankProcessDate TransactionResponse::bankProcessDate');
    }

    /**
     * @return DateTime
     */
    public static function sampleBankProcessDate(): DateTime {
        return DateTime::createFromFormat(DateTimeInterface::ISO8601_EXPANDED, '2020-12-10T12:10:10+00:00');
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFiCode(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFiCode(): string {
        if (TransactionResponse::validateFiCode($this->fiCode))  {
            return $this->fiCode; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::fiCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFiCode(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::fiCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFiCode(): string {
        if (TransactionResponse::validateFiCode($this->fiCode))  {
            return $this->fiCode;
        }
        throw new Exception('never get to getFiCode TransactionResponse::fiCode');
    }

    /**
     * @return string
     */
    public static function sampleFiCode(): string {
        return 'TransactionResponse::fiCode::41'; /*41:fiCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFiName(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFiName(): string {
        if (TransactionResponse::validateFiName($this->fiName))  {
            return $this->fiName; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::fiName');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFiName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::fiName");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFiName(): string {
        if (TransactionResponse::validateFiName($this->fiName))  {
            return $this->fiName;
        }
        throw new Exception('never get to getFiName TransactionResponse::fiName');
    }

    /**
     * @return string
     */
    public static function sampleFiName(): string {
        return 'TransactionResponse::fiName::42'; /*42:fiName*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPaymentSystem(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPaymentSystem(): string {
        if (TransactionResponse::validatePaymentSystem($this->paymentSystem))  {
            return $this->paymentSystem; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::paymentSystem');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentSystem(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::paymentSystem");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPaymentSystem(): string {
        if (TransactionResponse::validatePaymentSystem($this->paymentSystem))  {
            return $this->paymentSystem;
        }
        throw new Exception('never get to getPaymentSystem TransactionResponse::paymentSystem');
    }

    /**
     * @return string
     */
    public static function samplePaymentSystem(): string {
        return 'TransactionResponse::paymentSystem::43'; /*43:paymentSystem*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTransCycle(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTransCycle(): string {
        if (TransactionResponse::validateTransCycle($this->transCycle))  {
            return $this->transCycle; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::transCycle');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTransCycle(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::transCycle");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTransCycle(): string {
        if (TransactionResponse::validateTransCycle($this->transCycle))  {
            return $this->transCycle;
        }
        throw new Exception('never get to getTransCycle TransactionResponse::transCycle');
    }

    /**
     * @return string
     */
    public static function sampleTransCycle(): string {
        return 'TransactionResponse::transCycle::44'; /*44:transCycle*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromInvoice(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toInvoice(): string {
        if (TransactionResponse::validateInvoice($this->invoice))  {
            return $this->invoice; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::invoice');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateInvoice(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::invoice");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getInvoice(): string {
        if (TransactionResponse::validateInvoice($this->invoice))  {
            return $this->invoice;
        }
        throw new Exception('never get to getInvoice TransactionResponse::invoice');
    }

    /**
     * @return string
     */
    public static function sampleInvoice(): string {
        return 'TransactionResponse::invoice::45'; /*45:invoice*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromReferenceArray(array $value): array {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toReferenceArray(): array {
        if (TransactionResponse::validateReferenceArray($this->referenceArray))  {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->referenceArray);
        }
        throw new Exception('never get to this TransactionResponse::referenceArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateReferenceArray(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:TransactionResponse::referenceArray");
        }
        array_walk($value, function($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:TransactionResponse::referenceArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getReferenceArray(): array {
        if (TransactionResponse::validateReferenceArray($this->referenceArray))  {
            return $this->referenceArray;
        }
        throw new Exception('never get to getReferenceArray TransactionResponse::referenceArray');
    }

    /**
     * @return array
     */
    public static function sampleReferenceArray(): array {
        return  array(
            'AnyType::TransactionResponse::::46'/*46:*/
        ); /* 46:referenceArray*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromOperationArray(array $value): array {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toOperationArray(): array {
        if (TransactionResponse::validateOperationArray($this->operationArray))  {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->operationArray);
        }
        throw new Exception('never get to this TransactionResponse::operationArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateOperationArray(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:TransactionResponse::operationArray");
        }
        array_walk($value, function($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:TransactionResponse::operationArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getOperationArray(): array {
        if (TransactionResponse::validateOperationArray($this->operationArray))  {
            return $this->operationArray;
        }
        throw new Exception('never get to getOperationArray TransactionResponse::operationArray');
    }

    /**
     * @return array
     */
    public static function sampleOperationArray(): array {
        return  array(
            'AnyType::TransactionResponse::::47'/*47:*/
        ); /* 47:operationArray*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSrvCode(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSrvCode(): string {
        if (TransactionResponse::validateSrvCode($this->srvCode))  {
            return $this->srvCode; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::srvCode');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSrvCode(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::srvCode");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSrvCode(): string {
        if (TransactionResponse::validateSrvCode($this->srvCode))  {
            return $this->srvCode;
        }
        throw new Exception('never get to getSrvCode TransactionResponse::srvCode');
    }

    /**
     * @return string
     */
    public static function sampleSrvCode(): string {
        return 'TransactionResponse::srvCode::48'; /*48:srvCode*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPaymentDesc(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPaymentDesc(): string {
        if (TransactionResponse::validatePaymentDesc($this->paymentDesc))  {
            return $this->paymentDesc; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::paymentDesc');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentDesc(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::paymentDesc");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPaymentDesc(): string {
        if (TransactionResponse::validatePaymentDesc($this->paymentDesc))  {
            return $this->paymentDesc;
        }
        throw new Exception('never get to getPaymentDesc TransactionResponse::paymentDesc');
    }

    /**
     * @return string
     */
    public static function samplePaymentDesc(): string {
        return 'TransactionResponse::paymentDesc::49'; /*49:paymentDesc*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromPaymentInfoArray(array $value): array {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toPaymentInfoArray(): array {
        if (TransactionResponse::validatePaymentInfoArray($this->paymentInfoArray))  {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->paymentInfoArray);
        }
        throw new Exception('never get to this TransactionResponse::paymentInfoArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentInfoArray(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:TransactionResponse::paymentInfoArray");
        }
        array_walk($value, function($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:TransactionResponse::paymentInfoArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getPaymentInfoArray(): array {
        if (TransactionResponse::validatePaymentInfoArray($this->paymentInfoArray))  {
            return $this->paymentInfoArray;
        }
        throw new Exception('never get to getPaymentInfoArray TransactionResponse::paymentInfoArray');
    }

    /**
     * @return array
     */
    public static function samplePaymentInfoArray(): array {
        return  array(
            'AnyType::TransactionResponse::::50'/*50:*/
        ); /* 50:paymentInfoArray*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromPaymentsArray(array $value): array {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toPaymentsArray(): array {
        if (TransactionResponse::validatePaymentsArray($this->paymentsArray))  {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->paymentsArray);
        }
        throw new Exception('never get to this TransactionResponse::paymentsArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validatePaymentsArray(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:TransactionResponse::paymentsArray");
        }
        array_walk($value, function($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:TransactionResponse::paymentsArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getPaymentsArray(): array {
        if (TransactionResponse::validatePaymentsArray($this->paymentsArray))  {
            return $this->paymentsArray;
        }
        throw new Exception('never get to getPaymentsArray TransactionResponse::paymentsArray');
    }

    /**
     * @return array
     */
    public static function samplePaymentsArray(): array {
        return  array(
            'AnyType::TransactionResponse::::51'/*51:*/
        ); /* 51:paymentsArray*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSessionToken(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSessionToken(): string {
        if (TransactionResponse::validateSessionToken($this->sessionToken))  {
            return $this->sessionToken; /*string*/
        }
        throw new Exception('never get to this TransactionResponse::sessionToken');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSessionToken(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TransactionResponse::sessionToken");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSessionToken(): string {
        if (TransactionResponse::validateSessionToken($this->sessionToken))  {
            return $this->sessionToken;
        }
        throw new Exception('never get to getSessionToken TransactionResponse::sessionToken');
    }

    /**
     * @return string
     */
    public static function sampleSessionToken(): string {
        return 'TransactionResponse::sessionToken::52'; /*52:sessionToken*/
    }

    /**
     * @param null $value
     * @throws Exception
     * @return Object
     */
    public static function fromSubscription(null $value): Object | null {
        return $value; /*null*/
    }

    /**
     * @throws Exception
     * @return null
     */
    public function toSubscription(): Object | null {
        if (TransactionResponse::validateSubscription($this->subscription))  {
            return $this->subscription; /*null*/
        }
        throw new Exception('never get to this TransactionResponse::subscription');
    }

    /**
     * @param Object
     * @return bool
     * @throws Exception
     */
    public static function validateSubscription(Object $value): bool {
        if (!is_null($value)) {
            throw new Exception("Attribute Error:TransactionResponse::subscription");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return Object
     */
    public function getSubscription(): Object {
        if (TransactionResponse::validateSubscription($this->subscription))  {
            return $this->subscription;
        }
        throw new Exception('never get to getSubscription TransactionResponse::subscription');
    }

    /**
     * @return Object
     */
    public static function sampleSubscription(): Object | null {
        return null; /*53:subscription*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromSubservicesArray(array $value): array {
        return  array_map(function ($value) {
            return $value; /*any*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toSubservicesArray(): array {
        if (TransactionResponse::validateSubservicesArray($this->subservicesArray))  {
            return array_map(function ($value) {
                return $value; /*any*/
            }, $this->subservicesArray);
        }
        throw new Exception('never get to this TransactionResponse::subservicesArray');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateSubservicesArray(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:TransactionResponse::subservicesArray");
        }
        array_walk($value, function($value_v) {
            if (!defined($value_v)) {
                throw new Exception("Attribute Error:TransactionResponse::subservicesArray");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getSubservicesArray(): array {
        if (TransactionResponse::validateSubservicesArray($this->subservicesArray))  {
            return $this->subservicesArray;
        }
        throw new Exception('never get to getSubservicesArray TransactionResponse::subservicesArray');
    }

    /**
     * @return array
     */
    public static function sampleSubservicesArray(): array {
        return  array(
            'AnyType::TransactionResponse::::54'/*54:*/
        ); /* 54:subservicesArray*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return TransactionResponse::validateEntityCode($this->entityCode)
        || TransactionResponse::validateTicketID($this->ticketID)
        || TransactionResponse::validateTrazabilityCode($this->trazabilityCode)
        || TransactionResponse::validateTranState($this->tranState)
        || TransactionResponse::validateReturnCode($this->returnCode)
        || TransactionResponse::validateTransValue($this->transValue)
        || TransactionResponse::validateTransVatValue($this->transVatValue)
        || TransactionResponse::validatePayCurrency($this->payCurrency)
        || TransactionResponse::validateCurrencyRate($this->currencyRate)
        || TransactionResponse::validateBankProcessDate($this->bankProcessDate)
        || TransactionResponse::validateFiCode($this->fiCode)
        || TransactionResponse::validateFiName($this->fiName)
        || TransactionResponse::validatePaymentSystem($this->paymentSystem)
        || TransactionResponse::validateTransCycle($this->transCycle)
        || TransactionResponse::validateInvoice($this->invoice)
        || TransactionResponse::validateReferenceArray($this->referenceArray)
        || TransactionResponse::validateOperationArray($this->operationArray)
        || TransactionResponse::validateSrvCode($this->srvCode)
        || TransactionResponse::validatePaymentDesc($this->paymentDesc)
        || TransactionResponse::validatePaymentInfoArray($this->paymentInfoArray)
        || TransactionResponse::validatePaymentsArray($this->paymentsArray)
        || TransactionResponse::validateSessionToken($this->sessionToken)
        || TransactionResponse::validateSubscription($this->subscription)
        || TransactionResponse::validateSubservicesArray($this->subservicesArray);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'EntityCode'} = $this->toEntityCode();
        $out->{'TicketId'} = $this->toTicketID();
        $out->{'TrazabilityCode'} = $this->toTrazabilityCode();
        $out->{'TranState'} = $this->toTranState();
        $out->{'ReturnCode'} = $this->toReturnCode();
        $out->{'TransValue'} = $this->toTransValue();
        $out->{'TransVatValue'} = $this->toTransVatValue();
        $out->{'PayCurrency'} = $this->toPayCurrency();
        $out->{'CurrencyRate'} = $this->toCurrencyRate();
        $out->{'BankProcessDate'} = $this->toBankProcessDate();
        $out->{'FICode'} = $this->toFiCode();
        $out->{'FiName'} = $this->toFiName();
        $out->{'PaymentSystem'} = $this->toPaymentSystem();
        $out->{'TransCycle'} = $this->toTransCycle();
        $out->{'Invoice'} = $this->toInvoice();
        $out->{'ReferenceArray'} = $this->toReferenceArray();
        $out->{'OperationArray'} = $this->toOperationArray();
        $out->{'SrvCode'} = $this->toSrvCode();
        $out->{'PaymentDesc'} = $this->toPaymentDesc();
        $out->{'PaymentInfoArray'} = $this->toPaymentInfoArray();
        $out->{'PaymentsArray'} = $this->toPaymentsArray();
        $out->{'SessionToken'} = $this->toSessionToken();
        $out->{'Subscription'} = $this->toSubscription();
        $out->{'SubservicesArray'} = $this->toSubservicesArray();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return TransactionResponse
     * @throws Exception
     */
    public static function from(stdClass $obj): TransactionResponse {
        return new TransactionResponse(
         TransactionResponse::fromEntityCode($obj->{'EntityCode'})
        ,TransactionResponse::fromTicketID($obj->{'TicketId'})
        ,TransactionResponse::fromTrazabilityCode($obj->{'TrazabilityCode'})
        ,TransactionResponse::fromTranState($obj->{'TranState'})
        ,TransactionResponse::fromReturnCode($obj->{'ReturnCode'})
        ,TransactionResponse::fromTransValue($obj->{'TransValue'})
        ,TransactionResponse::fromTransVatValue($obj->{'TransVatValue'})
        ,TransactionResponse::fromPayCurrency($obj->{'PayCurrency'})
        ,TransactionResponse::fromCurrencyRate($obj->{'CurrencyRate'})
        ,TransactionResponse::fromBankProcessDate($obj->{'BankProcessDate'})
        ,TransactionResponse::fromFiCode($obj->{'FICode'})
        ,TransactionResponse::fromFiName($obj->{'FiName'})
        ,TransactionResponse::fromPaymentSystem($obj->{'PaymentSystem'})
        ,TransactionResponse::fromTransCycle($obj->{'TransCycle'})
        ,TransactionResponse::fromInvoice($obj->{'Invoice'})
        ,TransactionResponse::fromReferenceArray($obj->{'ReferenceArray'})
        ,TransactionResponse::fromOperationArray($obj->{'OperationArray'})
        ,TransactionResponse::fromSrvCode($obj->{'SrvCode'})
        ,TransactionResponse::fromPaymentDesc($obj->{'PaymentDesc'})
        ,TransactionResponse::fromPaymentInfoArray($obj->{'PaymentInfoArray'})
        ,TransactionResponse::fromPaymentsArray($obj->{'PaymentsArray'})
        ,TransactionResponse::fromSessionToken($obj->{'SessionToken'})
        ,TransactionResponse::fromSubscription($obj->{'Subscription'})
        ,TransactionResponse::fromSubservicesArray($obj->{'SubservicesArray'})
        );
    }

    /**
     * @return TransactionResponse
     */
    public static function sample(): TransactionResponse {
        return new TransactionResponse(
         TransactionResponse::sampleEntityCode()
        ,TransactionResponse::sampleTicketID()
        ,TransactionResponse::sampleTrazabilityCode()
        ,TransactionResponse::sampleTranState()
        ,TransactionResponse::sampleReturnCode()
        ,TransactionResponse::sampleTransValue()
        ,TransactionResponse::sampleTransVatValue()
        ,TransactionResponse::samplePayCurrency()
        ,TransactionResponse::sampleCurrencyRate()
        ,TransactionResponse::sampleBankProcessDate()
        ,TransactionResponse::sampleFiCode()
        ,TransactionResponse::sampleFiName()
        ,TransactionResponse::samplePaymentSystem()
        ,TransactionResponse::sampleTransCycle()
        ,TransactionResponse::sampleInvoice()
        ,TransactionResponse::sampleReferenceArray()
        ,TransactionResponse::sampleOperationArray()
        ,TransactionResponse::sampleSrvCode()
        ,TransactionResponse::samplePaymentDesc()
        ,TransactionResponse::samplePaymentInfoArray()
        ,TransactionResponse::samplePaymentsArray()
        ,TransactionResponse::sampleSessionToken()
        ,TransactionResponse::sampleSubscription()
        ,TransactionResponse::sampleSubservicesArray()
        );
    }
}
